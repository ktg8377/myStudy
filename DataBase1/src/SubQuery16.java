
public class SubQuery16 {

//	서브쿼리(Subquery)
//	
//	하나의 SQL문 안에 포함되어 있는 또 다른 SQL문을 말한다
//	서브쿼리는 알려지지 않은 기준을 이용한 검색을 위해 사용한다
//	
//	서브쿼리는 메인쿼리가 서브쿼리를 포함하는 관계를 말한다
//	
//	MAIN 쿼리
//	SELECT	,,,
//	FROM ,,,
//	WHERE ,,, (SELECT	,,,		SUB 쿼리
//				FROM	,,,
//				WHERE ,,,);
//	
//	@서브쿼리를 사용할 때 다음 사항에 주의해야 한다
//	- 서브쿼리를 괄호로 감싸서 사용한다
//	- 서브쿼리는 단일 행 또는 복수 행(MULTIPLE ROW) 비교 연산자와 함게 사용 가능하다
//	단일 행 비교 연산자는 서브쿼리의 결과가 반드시 1건 이하이어야 하고
//	복수 행 비교 연산자는 서브쿼리의 결과 건수와 상관 없다
//	- 서브쿼리에서는 ORDER BY를 사용하지 못한다. ORDER BY절은 SELECT절에서
//	오직 한 개만 올수 있기 때문에 ORDER BY절은 메인쿼리의 마지막 문장에 위치해야 한다
//	
//	@서브쿼리가 SQL문에서 사용이 가능한 곳
//	- SELECT
//	- FROM
//	- WHERE
//	- HAVING
//	- INSERT문의 VALUES절
//	- UPDATE문의 SET절
	
//	@단일 행 서브쿼리????
//	
//	서브쿼리의 실행 결과가 항상 1건 이하인 서브쿼리를 의미한다
//	단일 행 서브쿼리는 단일 행 비교 연산자와 함께 사용된다
//	단일 행 비교 연산자에는 =, <, >, <=, >=, <>가 있다
	
	
//	join		vs		subQuery
//	@조인
//	거의 모든 걸 구현가능
//	실행 속도는 느린편이고 자원을 많이 먹는다
//	
//	
//	@서브쿼리
//	메인에 해당하는 로직만 구현가능
//	실행 속도는 바른편이고 자원을 적게 먹는다
	
//	@다중 행 서브쿼리
//	서브쿼리 결과가 2건 이상 반환될 수 있다면 다중 행 비교 연산자
//	IN, ANY, ALL등을 사용해야 한다
//	그렇지 않으면 오류가 ㅂ라생한다
//	
//	IN: 서브쿼리의 결과에 존재하는 임의의 값과 동일한 조건을 의미한다
//	OR연산자
//	
//	ALL: 서브쿼리의 결과에 존재하는 모든 값을 만족하는 조건을 의미한다
//	비교 연산자로 >를 사용했다면 메인쿼리는 서브쿼리의 모든 결과 값을 만족
//	하면 값을 출력한다 
	
//	비교 연산자에서 대상컬럼이 모든 비교값보다 큰지, 작은지에 대한 
//	연산자들이 모두 참이면 포함된다
//	
//	ANY: 서브쿼리의 결과에 존재하는 어느 하나의 값이라도 만족하는 조건을 의미한다
//	비교 연산자로 >를 사용했다면 메인쿼리는 서브쿼리의 값들 중 어떤 값이라도 만족하면
//	값을 출력한다.
//	
//	등이 있다
	
	
//	@다중 컬럼 서브쿼리
//	다중 컬럼 서브쿼리는 서브쿼리의 결과로 여러 개의 컬럼이 반환되어
//	메인쿼리의 조건과 동시에 비교되는 것을 말한다
//	컬럼이 여러개인 경우를 말한다
//	(단, 로우 개수는 1개여야 한다)

//	@그 밖에 위치에서 사용하는 서브쿼리
//	
//	- SELECT절에 서브쿼리 사용하기(SCALAR SUBQUERY)
//	
//	서브쿼리를 SELECT절에 사용하면 스칼라 서브쿼리라고 부른다
//	스칼라 서브쿼리는 한 행, 한 컬럼만을 반환하는 서브쿼리이다
//	
//	스칼라 서브쿼리는 컬럼을 쓸 수 있는 대부분의 곳에서 사용할 수 있다
	
//	@FROM 절에서 서브쿼리 사용하기
//	FROM절에서 사용되는 서브쿼리를 인라인 뷰(Inline View)라고 한다
//	
//	from절에 서크붜리를 수행하면 마치 실행 시에 생성된 테이블인 것처럼
//	사용할 수 있다
//	인라인 뷰는 sql문이 실행될 때만 임시적으로 생성되는 동적인 뷰이기 때문에
//	데이터베이스에 해당 정보가 저장되지 않는다
//	인라인 뷰는 테이블 명이 올 수 있는 곳에서 어디든 사용할 수 있다
	
//	서브쿼리의 컬럼은 메인쿼리에서 사용할 수 없다
//	그러나 인라인 뷰는 동적으로 생성된 테이블이다
//	인라인 뷰를 사용하는 것은 join방식을 사용하는 것과 같다
//	그렇기 때문에 인라인 뷰의 컬럼은 sql문에서 자유롭게 참조할 수 있다
	
	
	
	
	
	

			
}
